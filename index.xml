<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>凡夫俗子的博客</title>
    <link>http://gitzh2017.github.io/</link>
    <description>Recent content on 凡夫俗子的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 28 Jun 2019 01:17:32 +0800</lastBuildDate>
    
	<atom:link href="http://gitzh2017.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Golang系列]-Go基础语法之指针</title>
      <link>http://gitzh2017.github.io/posts/11-golang/</link>
      <pubDate>Fri, 28 Jun 2019 01:17:32 +0800</pubDate>
      
      <guid>http://gitzh2017.github.io/posts/11-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Golang系列]-Go基础语法之map</title>
      <link>http://gitzh2017.github.io/posts/10-golang/</link>
      <pubDate>Fri, 28 Jun 2019 01:14:25 +0800</pubDate>
      
      <guid>http://gitzh2017.github.io/posts/10-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Golang系列]-Go基础语法之切片</title>
      <link>http://gitzh2017.github.io/posts/09-golang/</link>
      <pubDate>Fri, 28 Jun 2019 01:14:21 +0800</pubDate>
      
      <guid>http://gitzh2017.github.io/posts/09-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Golang系列]-Go基础语法之数组</title>
      <link>http://gitzh2017.github.io/posts/08-golang/</link>
      <pubDate>Fri, 28 Jun 2019 01:14:18 +0800</pubDate>
      
      <guid>http://gitzh2017.github.io/posts/08-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Golang系列]-Go基础语法之函数</title>
      <link>http://gitzh2017.github.io/posts/07-golang/</link>
      <pubDate>Fri, 28 Jun 2019 01:14:14 +0800</pubDate>
      
      <guid>http://gitzh2017.github.io/posts/07-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Golang系列]-Go基础语法之流程控制</title>
      <link>http://gitzh2017.github.io/posts/06-golang/</link>
      <pubDate>Fri, 28 Jun 2019 01:14:10 +0800</pubDate>
      
      <guid>http://gitzh2017.github.io/posts/06-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Golang系列]-Go基础语法之运算符</title>
      <link>http://gitzh2017.github.io/posts/05-golang/</link>
      <pubDate>Fri, 28 Jun 2019 01:12:01 +0800</pubDate>
      
      <guid>http://gitzh2017.github.io/posts/05-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Golang系列]-Go基础语法之基础数据类型</title>
      <link>http://gitzh2017.github.io/posts/04-golang/</link>
      <pubDate>Fri, 28 Jun 2019 01:11:58 +0800</pubDate>
      
      <guid>http://gitzh2017.github.io/posts/04-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Golang系列]-Go基础语法之变量与常量</title>
      <link>http://gitzh2017.github.io/posts/03-golang/</link>
      <pubDate>Fri, 28 Jun 2019 01:11:53 +0800</pubDate>
      
      <guid>http://gitzh2017.github.io/posts/03-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Golang系列]-Go开发环境 VS Code</title>
      <link>http://gitzh2017.github.io/posts/02-golang/</link>
      <pubDate>Fri, 28 Jun 2019 01:09:26 +0800</pubDate>
      
      <guid>http://gitzh2017.github.io/posts/02-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Golang系列]-Go环境安装</title>
      <link>http://gitzh2017.github.io/posts/01-golang/</link>
      <pubDate>Fri, 28 Jun 2019 01:09:17 +0800</pubDate>
      
      <guid>http://gitzh2017.github.io/posts/01-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Golang系列]-Go语言介绍</title>
      <link>http://gitzh2017.github.io/posts/00-golang/</link>
      <pubDate>Fri, 28 Jun 2019 01:09:06 +0800</pubDate>
      
      <guid>http://gitzh2017.github.io/posts/00-golang/</guid>
      <description>Go 语言是由谷歌公司在2007年开始开发的一门语言，目的是能在多核心时代高效编写网络应用程序。Go 语言的创始人 Robert Griesemer、Rob Pike 和 Ken Thompson 都是在计算机发展过程中作出过重要贡献的人。自从2009年11月正式公开发布后，Go 语言迅速席卷了整个互联网后端开发领域，其社区里不断涌现出类似 vitess、Docker、etcd、Consul、kubernetes 等重量级的开源项目。
计算机一直在演化，但是编程语言并没有以同样的速度演化。现在的手机，内置的 CPU 核数可能都多于我们使用的第一台电脑。高性能服务器拥有64核、128核，甚至更多核。但是我们依旧在使用为单核设计的技术在编程。
编程的技术同样在演化。大部分程序不再由单个开发者来完成，而是由处于不同时区、不同时间段工作的一组人来完成。大项目被分解为小项目，指派给不同的程序员，程序员开发完成后，再以可以在各个应用程序中交叉使用的库或者包的形式，提交给整个团队。
如今的程序员和公司比以往更加信任开源软件的力量。Go 语言是一种让代码分享更容易的编程语言。Go 语言自带一些工具，让使用别人写的包更容易，并且 Go 语言也让分享自己写的包更容易。
Go语言介绍 Go语言是什么 Go是一种开源的程序设计语言，它意在使得人们能够方便地构建简单、可靠、高效率的软件”（来自go官网golang.org）程序员在开发程序，开发软件时都会选择一门编程语言，那么我们应该怎样进行选择呢？可能有人会说，我们要选择一门简单的，容易学习的，而且开发效率高的，能够在很短的时间内开发完成一个软件，这样老板会非常的满意，能够升职加薪，Python语言或者Ruby语言就非常适合这种快速开发。但是问题是，用这种语言开发的软件，当用户量多了，运行的速度会非常慢，给人的感觉就是非常卡，大家想一下这种软件还有人愿意使用吗？那可能又有同学说了，我们要学习运行速度快的编程语言，例如C或者是C++,但是这类编程语言学习难度是非常大的。那么有没有一种编程语言，学习非常简单，开发速度非常快，开发出的软件电脑运行速度非常快呢？有，就是我们今天所要说的GO语言。GO 语言借鉴了Python等其它编程语言简单，易学，生产效率高，同时GO语言专门针对多处理器（多核CPU）系统的程序进行了优化（让每核CPU都能够执行GO语言开发的程序），这样使用GO语言开发的程序运行的速度可以媲美C或C++开发程序的速度。
Go语言优势  运行速度快，简单易学。 适合区块链开发。 跨平台。 丰富的标准库（指令），Go目前已经内置了大量的库，特别是网络库非常强大。(开发飞秋软件) Go里面也可以直接包含C代码，利用现有的丰富的C库。 语言层面支持并发，这个就是Go最大的特色，天生的支持并发。所谓并发，所有正在运行的程序轮流使用CPU，每个程序允许占用CPU的时间非常短（比如10毫秒），这样用户根本感觉不出来CPU是在轮流为多个程序服务，就好象所有的程序都在不间断地运行一样。并发好处就是可以运行多个程序，并不卡顿。
Go语言能干什么？ 目前Go语言已经⼴泛应用于人工智能、云计算开发、容器虚拟化、⼤数据开发、数据分析及科学计算、运维开发、爬虫开发、游戏开发等领域。Go语言简单易学，天生支持并发，完美契合当下高并发的互联网生态。Go语言的岗位需求持续高涨，目前的Go程序员数量少，待遇好。
 网络编程，这一块目前应用最广，例如网站开发。
 服务器编程，例如：处理日志，处理文件。（在网站开发的过程中都会涉及到）
 区块链相关方向的开发。
Go特性 Go语言为并发而生 硬件制造商正在为处理器添加越来越多的内核以提高性能。所有数据中心都在这些处理器上运行，更重要的是，今天的应用程序使用多个微服务来维护数据库连接，消息队列和维护缓存。因此，开发的软件和编程语言应该可以轻松地支持并发性，并且应该能够随着CPU核心数量的增加而可扩展。但是，大多数现代编程语言（如Java，Python等）都来自90年代的单线程环境。虽然一些编程语言的框架在不断地提高多核资源使用效率，例如 Java 的 Netty 等，但仍然需要开发人员花费大量的时间和精力搞懂这些框架的运行原理后才能熟练掌握。Go于2009年发布，当时多核处理器已经上市。Go语言在多核并发上拥有原生的设计优势，Go语言从底层原生支持并发，无须第三方库、开发者的编程技巧和开发经验。很多公司，特别是中国的互联网公司，即将或者已经完成了使用 Go 语言改造旧系统的过程。经过 Go 语言重构的系统能使用更少的硬件资源获得更高的并发和I/O吞吐表现。充分挖掘硬件设备的潜力也满足当前精细化运营的市场大环境。
  Go语言的并发是基于 goroutine 的，goroutine 类似于线程，但并非线程。可以将 goroutine 理解为一种虚拟线程。Go 语言运行时会参与调度 goroutine，并将 goroutine 合理地分配到每个 CPU 中，最大限度地使用CPU性能。开启一个goroutine的消耗非常小（大约2KB的内存），你可以轻松创建数百万个goroutine。
goroutine的特点： 1. goroutine具有可增长的分段堆栈。这意味着它们只在需要时才会使用更多内存。 2.</description>
    </item>
    
  </channel>
</rss>